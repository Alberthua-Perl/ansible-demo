# Copyright: (c) 2019, Andrew Klychkov (@Andersson007) <andrew.a.klychkov@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

####################
# Prepare for tests:

# Create test roles:
- name: postgresql_membership - create test roles
  become_user: "{{ pg_user }}"
  become: true
  postgresql_user:
    login_user: "{{ pg_user }}"
    db: postgres
    name: "{{ item }}"
  ignore_errors: true
  with_items:
  - "group1"
  - "group2"
  - "group.with.dots"
  - "user1"
  - "user.with.dots"

################
# Do main tests:

### Test check_mode
# Grant group1 to user1 in check_mode:
- name: postgresql_membership - grant group1 to user1 in check_mode
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: "group1"
    user: "user1"
    state: present
  register: result
  ignore_errors: true
  check_mode: true

- assert:
    that:
    - result is changed
    - result.groups == ["group1"]
    - result.queries == ["GRANT \"group1\" TO \"user1\""]
    - result.granted["group1"] == ["user1"]
    - result.state == "present"
    - result.target_roles == ["user1"]

# Try to revoke group1 from user1 to check that
# nothing actually changed in check_mode at the previous step:
- name: postgresql_membership - try to revoke group1 from user1 for checking check_mode
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: "group1"
    user: "user1"
    state: absent
  register: result
  ignore_errors: true
  check_mode: true

- assert:
    that:
    - result is not changed
    - result.groups == ["group1"]
    - result.queries == []
    - result.revoked["group1"] == []
    - result.state == "absent"
    - result.target_roles == ["user1"]
### End of test check_mode

# Grant group1 to user1:
- name: postgresql_membership - grant group1 to user1
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: "group1"
    user: "user1"
    state: present
  register: result
  ignore_errors: true

- assert:
    that:
    - result is changed
    - result.groups == ["group1"]
    - result.queries == ["GRANT \"group1\" TO \"user1\""]
    - result.granted["group1"] == ["user1"]
    - result.state == "present"
    - result.target_roles == ["user1"]

# Grant group1 to user1 again to check that nothing changes:
- name: postgresql_membership - grant group1 to user1 again
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: "group1"
    user: "user1"
    state: present
  register: result
  ignore_errors: true

- assert:
    that:
    - result is not changed
    - result.groups == ["group1"]
    - result.queries == []
    - result.granted["group1"] == []
    - result.state == "present"
    - result.target_roles == ["user1"]

# Revoke group1 from user1:
- name: postgresql_membership - revoke group1 from user1
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: "group1"
    user: "user1"
    state: absent
  register: result
  ignore_errors: true

- assert:
    that:
    - result is changed
    - result.groups == ["group1"]
    - result.queries == ["REVOKE \"group1\" FROM \"user1\""]
    - result.revoked["group1"] == ["user1"]
    - result.state == "absent"
    - result.target_roles == ["user1"]

# Revoke group1 from user1 again to check that nothing changes:
- name: postgresql_membership - revoke group1 from user1 again
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: "group1"
    user: "user1"
    state: absent
  register: result
  ignore_errors: true

- assert:
    that:
    - result is not changed
    - result.groups == ["group1"]
    - result.queries == []
    - result.revoked["group1"] == []
    - result.state == "absent"
    - result.target_roles == ["user1"]

# Grant group1 and group2 to user1 and user.with.dots:
- name: postgresql_membership - grant two groups to two users
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group:
    - "group1"
    - "group2"
    user:
    - "user1"
    - "user.with.dots"
    state: present
  register: result
  ignore_errors: true

- assert:
    that:
    - result is changed
    - result.groups == ["group1", "group2"]
    - result.granted["group1"] == ["user1", "user.with.dots"]
    - result.granted["group2"] == ["user1", "user.with.dots"]
    - result.state == "present"
    - result.target_roles == ["user1", "user.with.dots"]

# Grant group1 and group2 to user1 and user.with.dots again to check that nothing changes:
- name: postgresql_membership - grant two groups to two users again
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group:
    - "group1"
    - "group2"
    user:
    - "user1"
    - "user.with.dots"
    state: present
  register: result
  ignore_errors: true

- assert:
    that:
    - result is not changed
    - result.groups == ["group1", "group2"]
    - result.queries == []
    - result.granted["group1"] == []
    - result.granted["group2"] == []
    - result.state == "present"
    - result.target_roles == ["user1", "user.with.dots"]

# Revoke only group1 from user1:
- name: postgresql_membership - revoke one group from one user
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: "group1"
    user: "user1"
    state: absent
  register: result
  ignore_errors: true

- assert:
    that:
    - result is changed
    - result.groups == ["group1"]
    - result.queries == ["REVOKE \"group1\" FROM \"user1\""]
    - result.revoked["group1"] == ["user1"]
    - result.state == "absent"
    - result.target_roles == ["user1"]

# Try to grant group1 and group2 to user1 and user.with.dots again
# to check that nothing changes with user.with.dots:
- name: postgresql_membership - grant two groups to two users again
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group:
    - "group1"
    - "group2"
    user:
    - "user1"
    - "user.with.dots"
    state: present
  register: result
  ignore_errors: true

- assert:
    that:
    - result is changed
    - result.groups == ["group1", "group2"]
    - result.queries == ["GRANT \"group1\" TO \"user1\""]
    - result.granted["group1"] == ["user1"]
    - result.granted["group2"] == []
    - result.state == "present"
    - result.target_roles == ["user1", "user.with.dots"]

#####################
# Check fail_on_role:

# Try to grant non existent group to non existent role with fail_on_role=true:
- name: postgresql_membership - revoke non existen group from non existen role
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: fake_group
    user: fake_user
    state: present
    fail_on_role: true
  register: result
  ignore_errors: true

- assert:
    that:
    - result is not changed

# Try to grant non existent group to non existent role with fail_on_role=no:
- name: postgresql_membership - revoke non existen group from non existen role
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: fake_group
    user: fake_user
    state: present
    fail_on_role: false
  register: result
  ignore_errors: true

- assert:
    that:
    - result is not changed
    - result.granted == {}
    - result.groups == []
    - result.target_roles == []
    - result.state == 'present'

# Try to revoke non existent group from non existent role with fail_on_role=no:
- name: postgresql_membership - revoke non existen group from non existen role
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: fake_group
    user: fake_user
    state: absent
    fail_on_role: false
  register: result
  ignore_errors: true

- assert:
    that:
    - result is not changed
    - result.revoked == {}
    - result.groups == []
    - result.target_roles == []
    - result.state == 'absent'

# Grant group.with.dots with a name containing dots to user1.
- name: postgresql_membership - grant group.with.dots with dots to user1
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group: "group.with.dots"
    user: "user1"
    state: present
  register: result

- assert:
    that:
    - result is changed
    - result.queries == ["GRANT \"group.with.dots\" TO \"user1\""]

#############################
# Check trust_input parameter

- name: postgresql_membership - try to use dangerous input, don't trust
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group:
    - "group.with.dots"
    - 'curious.anonymous"; SELECT * FROM information_schema.tables; --'
    user: "user1"
    state: present
    trust_input: false
  register: result
  ignore_errors: true

- assert:
    that:
    - result is failed
    - result.msg == 'Passed input \'curious.anonymous"; SELECT * FROM information_schema.tables; --\' is potentially dangerous'

- name: postgresql_membership - try to use dangerous input, trust explicitly
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    group:
    - "group.with.dots"
    - 'curious.anonymous"; SELECT * FROM information_schema.tables; --'
    user: "user1"
    state: present
    trust_input: true
  register: result
  ignore_errors: true

- assert:
    that:
    - result is failed
    - result.msg == 'Role curious.anonymous"; SELECT * FROM information_schema.tables; -- does not exist'

########################
# Tests for match method
- name: Revoke all groups from a role check mode
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups: []
    user: "user1"
    state: exact
  register: result
  check_mode: true

- assert:
    that:
    - result is changed
    - result.revoked["group.with.dots"] == ["user1"]
    - result.revoked["group1"] == ["user1"]
    - result.revoked["group2"] == ["user1"]
    - result.granted == {}


- name: Check result of prev task
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group1', 'group2', 'group.with.dots']

- name: Revoke all groups from a role actual mode
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups: []
    user: "user1"
    state: exact
  register: result

- assert:
    that:
    - result is changed
    - result.revoked["group.with.dots"] == ["user1"]
    - result.revoked["group1"] == ["user1"]
    - result.revoked["group2"] == ["user1"]
    - result.granted == {}


- name: Check result of prev task
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == []

- name: Grant all groups to a role check mode
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups:
    - "group1"
    - "group2"
    - "group.with.dots"
    user: "user1"
    state: exact
  register: result
  check_mode: true

- assert:
    that:
    - result is changed
    - result.granted["group.with.dots"] == ["user1"]
    - result.granted["group1"] == ["user1"]
    - result.granted["group2"] == ["user1"]
    - result.revoked == {}


- name: Check result of prev task
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == []

- name: Grant all groups to a role real mode
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups:
    - "group1"
    - "group2"
    - "group.with.dots"
    user: "user1"
    state: exact
  register: result

- assert:
    that:
    - result is changed
    - result.granted["group.with.dots"] == ["user1"]
    - result.granted["group1"] == ["user1"]
    - result.granted["group2"] == ["user1"]
    - result.revoked == {}


- name: Check result of prev task
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group1', 'group2', 'group.with.dots']

- name: Change groups 1
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups:
    - "group1"
    user: "user1"
    state: exact
  register: result

- assert:
    that:
    - result is changed
    - result.revoked["group.with.dots"] == ["user1"]
    - result.revoked["group2"] == ["user1"]
    - result.granted == {}


- name: Check result of prev task
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group1']

- name: Change groups 2
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups:
    - "group2"
    - "group.with.dots"
    user: "user1"
    state: exact
  register: result

- assert:
    that:
    - result is changed
    - result.granted["group.with.dots"] == ["user1"]
    - result.granted["group2"] == ["user1"]
    - result.revoked["group1"] == ["user1"]

- name: Check result of prev task
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group2', 'group.with.dots']

- name: Change groups 2 again
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups:
    - "group2"
    - "group.with.dots"
    user: "user1"
    state: exact
  register: result

- assert:
    that:
    - result is not changed
    - result.queries == []
    - result.granted == {}
    - result.revoked == {}


- name: Check result of prev task
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group2', 'group.with.dots']

- name: Change groups for two users
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups:
    - "group1"
    - "group2"
    - "group.with.dots"
    users:
    - "user1"
    - "user.with.dots"
    state: exact
  register: result

- assert:
    that:
    - result is changed
    - result.granted["group1"] == ["user1"]
    - result.granted["group.with.dots"] == ["user.with.dots"]
    - result.revoked == {}

- name: Check result of prev task for user1
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group1', 'group2', 'group.with.dots']

- name: Check result of prev task for user.with.dots
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user.with.dots'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group1', 'group2', 'group.with.dots']

- name: Change groups for two users 2
  become_user: "{{ pg_user }}"
  become: true
  postgresql_membership:
    login_user: "{{ pg_user }}"
    db: postgres
    groups:
    - "group2"
    - "group.with.dots"
    users:
    - "user1"
    - "user.with.dots"
    state: exact
  register: result

- assert:
    that:
    - result is changed
    - result.revoked["group1"] == ["user1", "user.with.dots"]
    - result.granted == {}

- name: Check result of prev task for user1
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user1'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group2', 'group.with.dots']

- name: Check result of prev task for user.with.dots
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_user: "{{ pg_user }}"
    db: postgres
    query: "SELECT ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) FROM pg_catalog.pg_roles r WHERE r.rolname = 'user.with.dots'"
  register: result

- assert:
    that:
    - result.query_result.0.array == ['group2', 'group.with.dots']
